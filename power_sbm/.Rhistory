b <- .8
nsims <- 200
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .05) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
n <- 500
m <- n
B <- diag(a-b,d) + matrix(b,d,d)
B2 <- B + diag(eps,d)
eps <- 0
nus1 <- eigen(B)
B2 <- B + diag(eps,d)
nus1 <- eigen(B)
nus_true1 <- nus1$vectors %*% diag(abs(nus1$values)^(1/2),d,d)
nus2 <- eigen(B2)
nus_true2 <- nus2$vectors %*% diag(abs(nus2$values)^(1/2),d,d)
Ipq <- diag(c(1,rep(-1,(d-1))),d,d)
pis <- rep(1/d,d)
sigma <- 1/2
p <- 1
nsims <- 10
toReturn <- rep(0,nsims)
for (iter in c(1:nsims)) {
print(paste0("iter = ",iter, " of ",max(nsims)
,", n = ",n," of ",max(ns),
", eps = ",eps," of ",max(epsilons)))
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- rho*t(assignmentvector1) %*% nus_true1
Ytrue <-  rho* t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- ase(A,d)
Yhat <- ase(C,d)
rm(A,C,P1,P2)
#Qinit <- get_sign(Xhat,Yhat)
#Qinit2 <- Qinit[c((p+1):d),c((p+1):d)]
Q <- align_matrices(Xhat,Yhat,lambda=.5,eps=.1,niter=20)
#Q <- OTP(Xhat[,c((p+1):d)],Yhat[,c((p+1):d)],Qinit=Qinit2,lambda=.0001,eps=.0001,niter=300)
#Xnew <- Xhat%*% bdiag(Qinit[1,1],Q)
Xnew <- Xhat %*% Q
#run test:
test <- nonpar.test(Xnew,Yhat,nsims=500)
toreturns[[epses]][[vals]][[iter]] <- test
}
rho <- 1
for (iter in c(1:nsims)) {
print(paste0("iter = ",iter, " of ",max(nsims)
,", n = ",n," of ",max(ns),
", eps = ",eps," of ",max(epsilons)))
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- rho*t(assignmentvector1) %*% nus_true1
Ytrue <-  rho* t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- ase(A,d)
Yhat <- ase(C,d)
rm(A,C,P1,P2)
#Qinit <- get_sign(Xhat,Yhat)
#Qinit2 <- Qinit[c((p+1):d),c((p+1):d)]
Q <- align_matrices(Xhat,Yhat,lambda=.5,eps=.1,niter=20)
#Q <- OTP(Xhat[,c((p+1):d)],Yhat[,c((p+1):d)],Qinit=Qinit2,lambda=.0001,eps=.0001,niter=300)
#Xnew <- Xhat%*% bdiag(Qinit[1,1],Q)
Xnew <- Xhat %*% Q
#run test:
test <- nonpar.test(Xnew,Yhat,nsims=500)
toreturns[[epses]][[vals]][[iter]] <- test
}
source("../misc_functions/misc.R")
source("../misc_functions/embed_and_align.R")
source("../misc_functions/align.R")
source("sbm_fun.R")
for (iter in c(1:nsims)) {
print(paste0("iter = ",iter, " of ",max(nsims)
,", n = ",n," of ",max(ns),
", eps = ",eps," of ",max(epsilons)))
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- rho*t(assignmentvector1) %*% nus_true1
Ytrue <-  rho* t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- ase(A,d)
Yhat <- ase(C,d)
rm(A,C,P1,P2)
#Qinit <- get_sign(Xhat,Yhat)
#Qinit2 <- Qinit[c((p+1):d),c((p+1):d)]
Q <- align_matrices(Xhat,Yhat,lambda=.5,eps=.1,niter=20)
#Q <- OTP(Xhat[,c((p+1):d)],Yhat[,c((p+1):d)],Qinit=Qinit2,lambda=.0001,eps=.0001,niter=300)
#Xnew <- Xhat%*% bdiag(Qinit[1,1],Q)
Xnew <- Xhat %*% Q
#run test:
test <- nonpar.test(Xnew,Yhat,nsims=500)
toreturns[[epses]][[vals]][[iter]] <- test
}
for (iter in c(1:nsims)) {
print(paste0("iter = ",iter, " of ",max(nsims)
,", n = ",n," of ",max(ns),
", eps = ",eps," of ",max(epsilons)))
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- rho*t(assignmentvector1) %*% nus_true1
Ytrue <-  rho* t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- ase(A,d)
Yhat <- ase(C,d)
rm(A,C,P1,P2)
#Qinit <- get_sign(Xhat,Yhat)
#Qinit2 <- Qinit[c((p+1):d),c((p+1):d)]
Q <- align_matrices(Xhat,Yhat,lambda=.5,eps=.1,niter=20)
#Q <- OTP(Xhat[,c((p+1):d)],Yhat[,c((p+1):d)],Qinit=Qinit2,lambda=.0001,eps=.0001,niter=300)
#Xnew <- Xhat%*% bdiag(Qinit[1,1],Q)
Xnew <- Xhat %*% Q
#run test:
test <- nonpar.test(Xnew,Yhat,nsims=500)
#toreturns[[epses]][[vals]][[iter]] <- test
}
print(paste0("iter = ",iter, " of ",max(nsims)
,", n = ",n," of ",max(ns),
", eps = ",eps," of ",max(epsilons)))
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- rho*t(assignmentvector1) %*% nus_true1
Ytrue <-  rho* t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- ase(A,d)
Yhat <- ase(C,d)
rm(A,C,P1,P2)
#Qinit <- get_sign(Xhat,Yhat)
#Qinit2 <- Qinit[c((p+1):d),c((p+1):d)]
Q <- align_matrices(Xhat,Yhat,lambda=.5,eps=.1,niter=20)
#Q <- OTP(Xhat[,c((p+1):d)],Yhat[,c((p+1):d)],Qinit=Qinit2,lambda=.0001,eps=.0001,niter=300)
#Xnew <- Xhat%*% bdiag(Qinit[1,1],Q)
Xnew <- Xhat %*% Q
#run test:
test <- nonpar.test(Xnew,Yhat,nsims=500)
test
Xtrue <- rho**t(assignmentvector1) %*% nus_true1
Xtrue
1 **2
if(!require(doParallel)) {
install.packages("doParallel")
}
numcores<- detectCores()
library(foreach)
library(doParallel)
numcores<- detectCores()
source("../misc_functions/misc.R")
source("../misc_functions/embed_and_align.R")
source("../misc_functions/align.R")
if(!require(foreach)) {
install.packages("foreach")
library(foreach)
}
if(!require(doParallel)) {
install.packages("doParallel")
library(doParallel)
}
numcores<- detectCores()
registerDoParallel(numCores)
source("sbm_fun.R")
set.seed(472022)
ns <- c(200,300) #seq(200,800,100)
epsilons <-  c(0,.1)#seq(0 ,.2,.1)
#ns <- c(100,200)
d <- 3
a <- .4
b <- .8
nsims <- 5#200
toreturns <- power_sbm_fun(472022,ns,epsilons,rho=.8,d,a,b,nsims)
?registerDoParallel
registerDoParallel()
source("sbm_fun.R")
set.seed(472022)
ns <- c(200,300) #seq(200,800,100)
epsilons <-  c(0,.1)#seq(0 ,.2,.1)
#ns <- c(100,200)
d <- 3
a <- .4
b <- .8
nsims <- 5#200
toreturns <- power_sbm_fun(472022,ns,epsilons,rho=.8,d,a,b,nsims)
if(!require(foreach)) {
install.packages("foreach")
library(foreach)
}
if(!require(doParallel)) {
install.packages("doParallel")
library(doParallel)
}
numcores<- detectCores()
registerDoParallel()
source("sbm_fun.R")
set.seed(472022)
ns <- c(200,300) #seq(200,800,100)
epsilons <-  c(0,.1)#seq(0 ,.2,.1)
#ns <- c(100,200)
d <- 3
a <- .4
b <- .8
nsims <- 5#200
toreturns <- power_sbm_fun(472022,ns,epsilons,rho=.8,d,a,b,nsims)
?makecluster
?makeCluster
cl <- makeCluster()
source("../misc_functions/misc.R")
source("../misc_functions/embed_and_align.R")
source("../misc_functions/align.R")
if(!require(foreach)) {
install.packages("foreach")
library(foreach)
}
if(!require(doParallel)) {
install.packages("doParallel")
library(doParallel)
}
numcores<- detectCores()
cl <- makeCluster(4)
registerDoParallel(cl,numcores)
source("sbm_fun.R")
set.seed(472022)
ns <- c(200,300) #seq(200,800,100)
epsilons <-  c(0,.1)#seq(0 ,.2,.1)
#ns <- c(100,200)
d <- 3
a <- .4
b <- .8
nsims <- 5#200
toreturns <- power_sbm_fun(472022,ns,epsilons,rho=.8,d,a,b,nsims)
load("power_sbm_rho_1_6-27.Rdata")
ns <- seq(200,800,100)
epsilons <-  seq(0 ,.2,.1)
d <- 3
a <- .4
b <- .8
nsims <- 200
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .05) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
load("power_sbm_rho_1_7-7.Rdata")
ns <- seq(200,800,100)
epsilons <-  seq(0 ,.2,.1)
d <- 3
a <- .4
b <- .8
nsims <- 200
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .05) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
toreturns[[1]]
toreturns[[2]]
toreturns[[3]]
toreturns
vector("list",length=2)
source("../misc_functions/misc.R")
source("../misc_functions/embed_and_align.R")
source("../misc_functions/align.R")
if(!require(foreach)) {
install.packages("foreach")
library(foreach)
}
if(!require(doParallel)) {
install.packages("doParallel")
library(doParallel)
}
numcores<- detectCores()
cl <- makeCluster(4,type = "FORK")
registerDoParallel(cl,numcores)
source("sbm_fun.R")
load("power_sbm_rho_6_7-7.Rdata")
toreturns[[1]]
toreturns
load("power_sbm_rho_6_7-7.Rdata")
load("power_sbm_rho_6_7-11.Rdata")
ns <- seq(200,800,100)
epsilons <-  seq(0 ,.2,.1)
d <- 3
a <- .4
b <- .8
nsims <- 200
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .05) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .1) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .2) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
load("power_sbm_rho_8_7-11.Rdata")
ns <- seq(200,800,100)
epsilons <-  seq(0 ,.2,.1)
d <- 3
a <- .4
b <- .8
nsims <- 200
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .05) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .2) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
d <- 2
d <- 3
ds <- list()
for (c in 1:d) {
ds[[c]] <- c(-1,1)
}
signs <- expand.grid(ds)
signs
obj.values1 <- rep(0,nrow(signs))
obj.values2 <- rep(0,nrow(signs))
obj.values3 <- rep(0,nrow(signs))
Q_news <- list()
Q_news2 <- list()
allsigns <- 1
signs[allsigns,]
diag(signs[allsigns,],)
load("power_sbm_rho_1_7-17.Rdata")
ns <- seq(200,600,100)
epsilons <-  seq(0 ,.2,.1)
nsims <- 100
d <- 3
a <- .4
b <- .8
#nsims <- 200
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .05) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
load("power_sbm_rho_6_7-17.Rdata")
ns <- seq(200,600,100)
epsilons <-  seq(0 ,.2,.1)
#ns <- c(100,200)
d <- 3
a <- .4
b <- .8
nsims <- 100
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .2) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
#
load("power_sbm_rho_8_7-17.Rdata")
ns <-seq(200,600,100)
epsilons <-  seq(0 ,.2,.1)
#ns <- c(100,200)
d <- 3
a <- .4
b <- .8
nsims <- 100
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .05) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
eps_n_matrix <- matrix(0,nrow=length(epsilons),ncol=length(ns))
row.names(eps_n_matrix) <- epsilons
colnames(eps_n_matrix) <- ns
for(i in c(1:length(toreturns))) {
#for each n
for(j in c(1:length(toreturns[[i]]))) {
for (q in c(1:length(toreturns[[i]][[j]]))) {
if(toreturns[[i]][[j]][[q]]$`estimated p-value` <= .1) {
#count hte number of times it is over .05.
eps_n_matrix[i,j] <- eps_n_matrix[i,j] + 1
}
}
}
}
eps_n_matrix/nsims
